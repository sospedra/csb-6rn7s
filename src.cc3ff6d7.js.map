{"version":3,"sources":["src/index.js"],"names":["scene","THREE","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","document","body","appendChild","domElement","controls","OrbitControls","rotateSpeed","zoomSpeed","minDistance","maxDistance","minPolarAngle","maxPolarAngle","Math","PI","enableDamping","dampingFactor","light","PointLight","add","light2","AmbientLight","ball","loader","GLTFLoader","crossOrigin","load","data","object","lookAt","frame","animate","rotation","x","render","requestAnimationFrame","update","addEventListener","aspect","updateProjectionMatrix"],"mappings":";AASA,IAAIA,EAAQ,IAAIC,MAAMC,MACtBF,EAAMG,WAAa,IAAIF,MAAMG,MAAM,GAKnC,IAAIC,EAAS,IAAIJ,MAAMK,kBACrB,GACAC,OAAOC,WAAaD,OAAOE,YAC3B,EACA,KAEFJ,EAAOK,SAASC,IAAI,EAAG,EAAG,IAK1B,IAAIC,EAAW,IAAIX,MAAMY,cAAc,CAAEC,WAAW,IACpDF,EAASG,QAAQR,OAAOC,WAAYD,OAAOE,aAG3CO,SAASC,KAAKC,YAAYN,EAASO,YAKnC,IAAIC,EAAW,IAAInB,MAAMoB,cAAchB,GAEvCe,EAASE,YAAc,GACvBF,EAASG,UAAY,GAErBH,EAASI,YAAc,EACvBJ,EAASK,YAAc,GAEvBL,EAASM,cAAgB,EACzBN,EAASO,cAAgBC,KAAKC,GAAK,EAEnCT,EAASU,eAAgB,EACzBV,EAASW,cAAgB,IAKzB,IAAIC,EAAQ,IAAI/B,MAAMgC,WAAW,SAAU,GAAI,KAC/CD,EAAMtB,SAASC,IAAI,EAAG,IAAK,IAC3BX,EAAMkC,IAAIF,GAEV,IAAIG,EAAS,IAAIlC,MAAMmC,aAAa,EAAU,GAAI,KAClDD,EAAOzB,SAASC,IAAI,IAAK,GAAI,IAC7BX,EAAMkC,IAAIC,GAKV,IACIE,EADAC,EAAS,IAAIrC,MAAMsC,WAEvBD,EAAOE,aAAc,EACrBF,EAAOG,KAAK,aAAc,SAAUC,GAC9BC,IAAAA,EAASD,EAAK1C,MAClB2C,EAAOjC,SAASC,KAAK,KAAM,GAAI,IAC/BX,EAAMkC,IAAIS,GACVtC,EAAOuC,OAAOD,GAEdN,EAAOM,IAET,IAAIE,EAAQ,EACNC,EAAU,WAGVT,GAFJQ,IAEIR,GAAQA,EAAKU,UAAYV,EAAK3B,SAAU,CACtC2B,GAAAA,EAAK3B,SAASsC,GAAK,GAGrB,OAFAX,EAAKU,SAASC,GAAK,QACnBX,EAAK3B,SAASsC,GAAK,KAIjBH,GAAAA,EAAQ,IAGV,OAFAR,EAAKU,SAASC,GAAK,SACnBX,EAAK3B,SAASsC,GAAK,KAIjBH,GAAAA,EAAQ,IAGV,OAFAR,EAAKU,SAASC,GAAK,QACnBX,EAAK3B,SAASsC,GAAK,MAOzB,SAASC,IACPC,sBAAsBD,GACtBH,IACAlC,EAASqC,OAAOjD,EAAOK,GACvBe,EAAS+B,SAGXF,IAKA1C,OAAO6C,iBACL,SACA,WACE/C,EAAOgD,OAAS9C,OAAOC,WAAaD,OAAOE,YAC3CJ,EAAOiD,yBACP1C,EAASG,QAAQR,OAAOC,WAAYD,OAAOE,eAE7C","file":"src.cc3ff6d7.js","sourceRoot":"..","sourcesContent":["/* eslint-disable */\n// Created using a tutorial from Redstapler\n// GLTF 3D Model from Shaw Pen https://codepen.io/shshaw/pen/yPPOEg\n\n// Three JS needs mainly below three things\n\n/* //////////////////////////////////////// */\n\n// SCENE\nvar scene = new THREE.Scene();\nscene.background = new THREE.Color(0x000000);\n\n/* //////////////////////////////////////// */\n\n// CAMERA\nvar camera = new THREE.PerspectiveCamera(\n  80,\n  window.innerWidth / window.innerHeight,\n  1,\n  800\n);\ncamera.position.set(8, 8, 10);\n\n/* ////////////////////////////////////////// */\n\n// RENDERER\nvar renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setSize(window.innerWidth, window.innerHeight);\n\n// Append canvas to the body\ndocument.body.appendChild(renderer.domElement);\n\n/* ////////////////////////////////////////// */\n\n// Camera Rotation Control\nvar controls = new THREE.OrbitControls(camera);\n\ncontrols.rotateSpeed = 0.3;\ncontrols.zoomSpeed = 0.9;\n\ncontrols.minDistance = 3;\ncontrols.maxDistance = 20;\n\ncontrols.minPolarAngle = 0; // radians\ncontrols.maxPolarAngle = Math.PI / 2; // radians\n\ncontrols.enableDamping = true;\ncontrols.dampingFactor = 0.05;\n\n/* /////////////////////////////////////////////// */\n\n// Point Light\nvar light = new THREE.PointLight(0xffffcc, 20, 200);\nlight.position.set(4, 30, -20);\nscene.add(light);\n\nvar light2 = new THREE.AmbientLight(0x000000, 20, 100);\nlight2.position.set(30, -10, 30);\nscene.add(light2);\n\n/* ////////////////////////////////////////// */\n\n// GLTF Loader to Load and manipulate 3D Models\nvar loader = new THREE.GLTFLoader();\nlet ball;\nloader.crossOrigin = true;\nloader.load(\"scene.gltf\", function (data) {\n  var object = data.scene;\n  object.position.set(-120, -2, -10);\n  scene.add(object);\n  camera.lookAt(object);\n\n  ball = object;\n});\nlet frame = 0;\nconst animate = () => {\n  frame++;\n\n  if (ball && ball.rotation && ball.position) {\n    if (ball.position.x < -12) {\n      ball.rotation.x += 0.5;\n      ball.position.x += 1.3;\n      return;\n    }\n\n    if (frame < 400) {\n      ball.rotation.x += 0.07;\n      ball.position.x += 0.01;\n      return;\n    }\n\n    if (frame < 1000) {\n      ball.rotation.x += 0.5;\n      ball.position.x += 0.9;\n      return;\n    }\n  }\n};\n\n// Render animation on every rendering phase\nfunction render() {\n  requestAnimationFrame(render);\n  animate();\n  renderer.render(scene, camera); // Render Scene and Camera\n  controls.update(); // For Orbit Controller\n}\n\nrender();\n\n/*////////////////////////////////////////*/\n\n// Update Camera Aspect Ratio and Renderer ScreenSize on Window resize\nwindow.addEventListener(\n  \"resize\",\n  function () {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  },\n  false\n);\n\n/*////////////////////////////////////////*/\n"]}